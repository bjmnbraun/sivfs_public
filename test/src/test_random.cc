#include <stdint.h>
#include "test_random.h"

#include <iostream>
#include <fstream>
#include <cassert>
#include <string.h>

//XXX
#define USE_URANDOM_RANDOMNESS true

//This file uses the chacha PRNG
extern "C" {
#include "chacha/ecrypt-sync.h"
}

//Thread-safety when using chacha to generate random bytes
__thread ECRYPT_ctx* chacha = NULL;
//TODO we can also buffer the stream of bytes output by chacha so that
//we don't repeatedly invoke chacha for small random string requests.
//No particular reason to believe this is a performance win, but some
//other implementations do this.

void init_chacha_threadlocal(int urandom){
  chacha = (ECRYPT_ctx*)malloc(sizeof(ECRYPT_ctx));

  if (urandom){
    std::ifstream rand ("/dev/urandom", std::ifstream::in);
    u8 key[256];
    u8 iv[64];
    rand.read((char*)&key, (size_t)(256/8));
    rand.read((char*)&iv, (size_t)(64/8));
    rand.close();
    ECRYPT_keysetup(chacha, key, 256, 64);
    ECRYPT_ivsetup(chacha, iv);
  } else {
    //Use a fixed string instead of /dev/urandom.
    u8 key[256]={240,90,104,232,156,207,96,61,211,143,159,210,51,69,254,201,212,19,7,27,33,36,73,139,141,147,128,85,101,16,178,180,123,47,153,21,41,8,18,189,125,219,11,92,53,3,166,230,86,146,252,78,174,233,66,115,110,106,220,116,216,71,2,42,95,253,199,231,206,177,135,246,152,222,144,225,198,151,184,84,64,6,4,136,190,169,228,10,94,158,79,237,119,145,99,238,129,251,221,131,157,56,204,28,55,22,100,76,173,196,160,170,242,70,213,134,137,91,13,120,224,15,202,108,203,255,111,98,52,163,44,185,244,167,239,60,50,208,234,82,250,59,80,226,49,68,48,62,89,183,83,247,14,186,132,97,148,249,130,117,103,175,194,223,93,114,179,105,197,195,133,32,193,0,26,124,81,176,58,209,241,40,102,63,1,154,149,74,37,67,34,35,122,200,182,12,24,236,140,215,191,127,172,126,25,192,188,38,150,45,142,217,181,168,87,109,30,20,248,39,23,112,5,77,162,72,164,43,235,88,29,227,121,65,107,214,75,187,118,138,113,31,161,243,46,57,17,218,171,9,155,54,205,229,165,245};
    u8 iv[64]={112,104,94,102,14,88,246,218,225,84,33,197,116,54,184,96,32,0,103,172,181,183,143,212,82,109,166,146,134,232,20,179,152,224,202,142,83,187,131,99,61,125,19,193,209,192,174,230,49,111,221,238,167,39,132,194,42,215,24,57,237,28,35,4};

    ECRYPT_keysetup(chacha, key, 256, 64);
    ECRYPT_ivsetup(chacha, iv);
  }
}

/**
  Writes len bytes generated by a cryptographically secure PRNG to out.
**/
void test_random(void* out, size_t len){
  if (chacha == NULL){
    init_chacha_threadlocal(USE_URANDOM_RANDOMNESS);
  }
  ECRYPT_keystream_bytes(chacha, (unsigned char*)out, len);
}
